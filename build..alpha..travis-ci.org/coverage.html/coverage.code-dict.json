{"/home/travis/build/npmtest/node-npmtest-cordova-plugin-dialogs/test.js":"/* istanbul instrument in package npmtest_cordova_plugin_dialogs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-dialogs/lib.npmtest_cordova_plugin_dialogs.js":"/* istanbul instrument in package npmtest_cordova_plugin_dialogs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_plugin_dialogs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_plugin_dialogs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-dialogs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-plugin-dialogs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_plugin_dialogs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_plugin_dialogs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_plugin_dialogs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cordova_plugin_dialogs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_plugin_dialogs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cordova_plugin_dialogs.__dirname + '/lib.npmtest_cordova_plugin_dialogs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-dialogs/node_modules/cordova-plugin-dialogs/www/notification.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar exec = require('cordova/exec');\nvar platform = require('cordova/platform');\n\n/**\n * Provides access to notifications on the device.\n */\n\nmodule.exports = {\n\n    /**\n     * Open a native alert dialog, with a customizable title and button text.\n     *\n     * @param {String} message              Message to print in the body of the alert\n     * @param {Function} completeCallback   The callback that is called when user clicks on a button.\n     * @param {String} title                Title of the alert dialog (default: Alert)\n     * @param {String} buttonLabel          Label of the close button (default: OK)\n     */\n    alert: function(message, completeCallback, title, buttonLabel) {\n        var _message = (typeof message === \"string\" ? message : JSON.stringify(message));\n        var _title = (typeof title === \"string\" ? title : \"Alert\");\n        var _buttonLabel = (buttonLabel && typeof buttonLabel === \"string\" ? buttonLabel : \"OK\");\n        exec(completeCallback, null, \"Notification\", \"alert\", [_message, _title, _buttonLabel]);\n    },\n\n    /**\n     * Open a native confirm dialog, with a customizable title and button text.\n     * The result that the user selects is returned to the result callback.\n     *\n     * @param {String} message              Message to print in the body of the alert\n     * @param {Function} resultCallback     The callback that is called when user clicks on a button.\n     * @param {String} title                Title of the alert dialog (default: Confirm)\n     * @param {Array} buttonLabels          Array of the labels of the buttons (default: ['OK', 'Cancel'])\n     */\n    confirm: function(message, resultCallback, title, buttonLabels) {\n        var _message = (typeof message === \"string\" ? message : JSON.stringify(message));\n        var _title = (typeof title === \"string\" ? title : \"Confirm\");\n        var _buttonLabels = (buttonLabels || [\"OK\", \"Cancel\"]);\n\n        // Strings are deprecated!\n        if (typeof _buttonLabels === 'string') {\n            console.log(\"Notification.confirm(string, function, string, string) is deprecated.  Use Notification.confirm(string, function, string, array).\");\n        }\n\n        _buttonLabels = convertButtonLabels(_buttonLabels);\n\n        exec(resultCallback, null, \"Notification\", \"confirm\", [_message, _title, _buttonLabels]);\n    },\n\n    /**\n     * Open a native prompt dialog, with a customizable title and button text.\n     * The following results are returned to the result callback:\n     *  buttonIndex     Index number of the button selected.\n     *  input1          The text entered in the prompt dialog box.\n     *\n     * @param {String} message              Dialog message to display (default: \"Prompt message\")\n     * @param {Function} resultCallback     The callback that is called when user clicks on a button.\n     * @param {String} title                Title of the dialog (default: \"Prompt\")\n     * @param {Array} buttonLabels          Array of strings for the button labels (default: [\"OK\",\"Cancel\"])\n     * @param {String} defaultText          Textbox input value (default: empty string)\n     */\n    prompt: function(message, resultCallback, title, buttonLabels, defaultText) {\n        var _message = (typeof message === \"string\" ? message : JSON.stringify(message));\n        var _title = (typeof title === \"string\" ? title : \"Prompt\");\n        var _buttonLabels = (buttonLabels || [\"OK\",\"Cancel\"]);\n\n        // Strings are deprecated!\n        if (typeof _buttonLabels === 'string') {\n            console.log(\"Notification.prompt(string, function, string, string) is deprecated.  Use Notification.confirm(string, function, string, array).\");\n        }\n\n        _buttonLabels = convertButtonLabels(_buttonLabels);\n\n        var _defaultText = (defaultText || \"\");\n        exec(resultCallback, null, \"Notification\", \"prompt\", [_message, _title, _buttonLabels, _defaultText]);\n    },\n\n    /**\n     * Causes the device to beep.\n     * On Android, the default notification ringtone is played \"count\" times.\n     *\n     * @param {Integer} count       The number of beeps.\n     */\n    beep: function(count) {\n        var defaultedCount = count || 1;\n        exec(null, null, \"Notification\", \"beep\", [ defaultedCount ]);\n    }\n};\n\nfunction convertButtonLabels(buttonLabels) {\n\n    // Some platforms take an array of button label names.\n    // Other platforms take a comma separated list.\n    // For compatibility, we convert to the desired type based on the platform.\n    if (platform.id == \"amazon-fireos\" || platform.id == \"android\" || platform.id == \"ios\" ||\n        platform.id == \"windowsphone\" || platform.id == \"firefoxos\" || platform.id == \"ubuntu\" ||\n        platform.id == \"windows8\" || platform.id == \"windows\") {\n\n        if (typeof buttonLabels === 'string') {\n            buttonLabels = buttonLabels.split(\",\"); // not crazy about changing the var type here\n        }\n    } else {\n        if (Array.isArray(buttonLabels)) {\n            var buttonLabelArray = buttonLabels;\n            buttonLabels = buttonLabelArray.toString();\n        }\n    }\n\n    return buttonLabels;\n}\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-dialogs/node_modules/cordova-plugin-dialogs/src/blackberry10/index.js":"/*\n* Copyright 2013 Research In Motion Limited.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* global qnx, PluginResult */\n\nfunction showDialog(args, dialogType, result) {\n    //Unpack and map the args\n    var msg = JSON.parse(decodeURIComponent(args[0])),\n    title = JSON.parse(decodeURIComponent(args[1])),\n    btnLabel = JSON.parse(decodeURIComponent(args[2]));\n\n    if (!Array.isArray(btnLabel)) {\n        //Converts to array for (string) and (string,string, ...) cases\n        btnLabel = btnLabel.split(\",\");\n    }\n\n    if (msg && typeof msg === \"string\") {\n        msg = msg.replace(/^\"|\"$/g, \"\").replace(/\\\\\"/g, '\"');\n    } else {\n        result.error(\"message is undefined\");\n        return;\n    }\n\n    var messageObj = {\n        title : title,\n        htmlmessage :  msg,\n        dialogType : dialogType,\n        optionalButtons : btnLabel\n    };\n\n    //TODO replace with getOverlayWebview() when available in webplatform\n    qnx.webplatform.getWebViews()[2].dialog.show(messageObj, function (data) {\n        if (typeof data === \"number\") {\n            //Confirm dialog call back needs to be called with one-based indexing [1,2,3 etc]\n            result.callbackOk(++data, false);\n        } else {\n            //Prompt dialog callback expects object\n            result.callbackOk({\n                buttonIndex: data.ok ? 1 : 0,\n                input1: (data.oktext) ? decodeURIComponent(data.oktext) : \"\"\n            }, false);\n        }\n    });\n\n    result.noResult(true);\n}\n\nmodule.exports = {\n    alert: function (success, fail, args, env) {\n        var result = new PluginResult(args, env);\n\n        if (Object.keys(args).length < 3) {\n            result.error(\"Notification action - alert arguments not found.\");\n        } else {\n            showDialog(args, \"CustomAsk\", result);\n        }\n    },\n    confirm: function (success, fail, args, env) {\n        var result = new PluginResult(args, env);\n\n        if (Object.keys(args).length < 3) {\n            result.error(\"Notification action - confirm arguments not found.\");\n        } else {\n            showDialog(args, \"CustomAsk\", result);\n        }\n    },\n    prompt: function (success, fail, args, env) {\n        var result = new PluginResult(args, env);\n\n        if (Object.keys(args).length < 3) {\n            result.error(\"Notification action - prompt arguments not found.\");\n        } else {\n            showDialog(args, \"JavaScriptPrompt\", result);\n        }\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-dialogs/node_modules/cordova-plugin-dialogs/src/firefoxos/notification.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar modulemapper = require('cordova/modulemapper');\n\n\nvar origOpenFunc = modulemapper.getOriginalSymbol(window, 'window.open');\n\n\nfunction _empty() {}\n\n\nfunction modal(message, callback, title, buttonLabels, domObjects) {\n    var mainWindow = window;\n    var modalWindow = origOpenFunc();\n    var modalDocument = modalWindow.document;\n\n    modalDocument.write(\n        '<html><head>' +\n        '<link rel=\"stylesheet\" type=\"text/css\" href=\"/css/index.css\" />' +\n        '<link rel=\"stylesheet\" type=\"text/css\" href=\"/css/notification.css\" />' +\n        '</head><body></body></html>');\n\n    var box = modalDocument.createElement('form');\n    box.setAttribute('role', 'dialog');\n    // prepare and append empty section\n    var section = modalDocument.createElement('section');\n    box.appendChild(section);\n    // add title\n    var boxtitle = modalDocument.createElement('h1');\n    boxtitle.appendChild(modalDocument.createTextNode(title));\n    section.appendChild(boxtitle);\n    // add message\n    var boxMessage = modalDocument.createElement('p');\n    boxMessage.appendChild(modalDocument.createTextNode(message));\n    section.appendChild(boxMessage);\n    // inject what's needed\n    if (domObjects) {\n        section.appendChild(domObjects);\n    }\n    // add buttons and assign callbackButton on click\n    var menu = modalDocument.createElement('menu');\n    box.appendChild(menu);\n    for (var index = 0; index < buttonLabels.length; index++) {\n        // TODO: last button listens to the cancel key\n        addButton(buttonLabels[index], (index+1), (index === 0));\n    }\n    modalDocument.body.appendChild(box);\n\n    function addButton(label, index, recommended) {\n        var thisButtonCallback = makeCallbackButton(index + 1);\n        var button = modalDocument.createElement('button');\n        button.appendChild(modalDocument.createTextNode(label));\n        button.addEventListener('click', thisButtonCallback, false);\n        if (recommended) {\n          // TODO: default one listens to Enter key\n          button.classList.add('recommend');\n        }\n        menu.appendChild(button);\n    }\n\n    // TODO: onUnload listens to the cancel key\n    function onUnload() {\n        var result = 0;\n        if (modalDocument.getElementById('prompt-input')) {\n            result = {\n                input1: '',\n                buttonIndex: 0\n            };\n        }\n        mainWindow.setTimeout(function() {\n            callback(result);\n        }, 10);\n    }\n    modalWindow.addEventListener('unload', onUnload, false);\n\n    // call callback and destroy modal\n    function makeCallbackButton(labelIndex) {\n        return function() {\n          if (modalWindow) {\n              modalWindow.removeEventListener('unload', onUnload, false);\n              modalWindow.close();\n          }\n          // checking if prompt\n          var promptInput = modalDocument.getElementById('prompt-input');\n          var response;\n          if (promptInput) {\n              response = {\n                input1: promptInput.value,\n                buttonIndex: labelIndex\n              };\n          }\n          response = response || labelIndex;\n          callback(response);\n        };\n    }\n}\n\nvar Notification = {\n    vibrate: function(milliseconds) {\n        navigator.vibrate(milliseconds);\n    },\n    alert: function(successCallback, errorCallback, args) {\n        var message = args[0];\n        var title = args[1];\n        var _buttonLabels = [args[2]];\n        var _callback = (successCallback || _empty);\n        modal(message, _callback, title, _buttonLabels);\n    },\n    confirm: function(successCallback, errorCallback, args) {\n        var message = args[0];\n        var title = args[1];\n        var buttonLabels = args[2];\n        var _callback = (successCallback || _empty);\n        modal(message, _callback, title, buttonLabels);\n    },\n    prompt: function(successCallback, errorCallback, args) {\n        var message = args[0];\n        var title = args[1];\n        var buttonLabels = args[2];\n        var defaultText = args[3];\n        var inputParagraph = document.createElement('p');\n        inputParagraph.classList.add('input');\n        var inputElement = document.createElement('input');\n        inputElement.setAttribute('type', 'text');\n        inputElement.id = 'prompt-input';\n        if (defaultText) {\n            inputElement.setAttribute('placeholder', defaultText);\n        }\n        inputParagraph.appendChild(inputElement);\n        modal(message, successCallback, title, buttonLabels, inputParagraph);\n    }\n};\n\n\nmodule.exports = Notification;\nrequire('cordova/exec/proxy').add('Notification', Notification);\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-dialogs/node_modules/cordova-plugin-dialogs/src/windows/NotificationProxy.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\n\n/*global Windows:true, WinJS, toStaticHTML */\n\nvar cordova = require('cordova');\nvar urlutil = require('cordova/urlutil');\n\nvar isAlertShowing = false;\nvar alertStack = [];\n\nfunction createCSSElem(fileName) {\n    var elemId = fileName.substr(0, fileName.lastIndexOf(\".\")) + \"-plugin-style\";\n    // If the CSS element exists, don't recreate it.\n    if (document.getElementById(elemId)) {\n        return false;\n    }\n\n    // Create CSS and append it to DOM.\n    var $elem = document.createElement('link');\n    $elem.id = elemId;\n    $elem.rel = \"stylesheet\";\n    $elem.type = \"text/css\";\n    $elem.href = urlutil.makeAbsolute(\"/www/css/\" + fileName);\n\n    document.head.appendChild($elem);\n    return true;\n}\n\n// CB-8928: When toStaticHTML is undefined, prompt fails to run\nvar _cleanHtml = function(html) { return html; };\nif (typeof toStaticHTML !== 'undefined') {\n    _cleanHtml = toStaticHTML;\n}\n\n// Windows does not provide native UI for promp dialog so we use some\n// simple html-based implementation until it is available\nfunction createPromptDialog(title, message, buttons, defaultText, callback) {\n\n    var isPhone = cordova.platformId === \"windows\" && WinJS.Utilities.isPhone;\n    var isWindows = !!cordova.platformId.match(/windows/);\n\n    createCSSElem(\"notification.css\");\n\n    var dlgWrap = document.createElement(\"div\");\n    dlgWrap.className = \"dlgWrap\";\n\n    var dlg = document.createElement(\"div\");\n    dlg.className = \"dlgContainer\";\n\n    if (isWindows) {\n        dlg.className += \" dlgContainer-windows\";\n    } else if (isPhone) {\n        dlg.className += \" dlgContainer-phone\";\n    }\n\n\n    // dialog layout template\n    dlg.innerHTML = _cleanHtml(\"<span id='lbl-title'></span><br/>\" + // title\n        \"<span id='lbl-message'></span><br/>\" + // message\n        \"<input id='prompt-input'/><br/>\"); // input fields\n\n    dlg.querySelector('#lbl-title').appendChild(document.createTextNode(title));\n    dlg.querySelector('#lbl-message').appendChild(document.createTextNode(message));\n    dlg.querySelector('#prompt-input').setAttribute('placeholder', defaultText);\n    dlg.querySelector('#prompt-input').setAttribute('value', defaultText);\n\n    function makeButtonCallback(idx) {\n        return function () {\n            var value = dlg.querySelector('#prompt-input').value || defaultText;\n            dlgWrap.parentNode.removeChild(dlgWrap);\n\n            if (callback) {\n                callback({ input1: value, buttonIndex: idx });\n            }\n        };\n    }\n\n    function addButton(idx, label) {\n        var button = document.createElement('button');\n        button.className = \"dlgButton\";\n        button.tabIndex = idx;\n        button.onclick = makeButtonCallback(idx + 1);\n        if (idx === 0) {\n            button.className += \" dlgButtonFirst\";\n        }\n        button.appendChild(document.createTextNode(label));\n        dlg.appendChild(button);\n    }\n\n    // reverse order is used since we align buttons to the right\n    for (var idx = buttons.length - 1; idx >= 0; idx--) {\n        addButton(idx, buttons[idx]);\n    }\n\n    dlgWrap.appendChild(dlg);\n    document.body.appendChild(dlgWrap);\n\n    // make sure input field is under focus\n    dlg.querySelector('#prompt-input').select();\n    // add Enter/Return key handling\n    var defaultButton = dlg.querySelector(\".dlgButtonFirst\");\n    dlg.addEventListener(\"keypress\",function(e) {\n        if (e.keyCode === 13) { // enter key\n            if(defaultButton) {\n                defaultButton.click();\n            }\n        }\n    });\n\n    return dlgWrap;\n}\n\nmodule.exports = {\n    alert:function(win, loseX, args) {\n\n        if (isAlertShowing) {\n            var later = function () {\n                module.exports.alert(win, loseX, args);\n            };\n            alertStack.push(later);\n            return;\n        }\n        isAlertShowing = true;\n\n        var message = args[0];\n        var _title = args[1];\n        var _buttonLabel = args[2];\n\n        var md = new Windows.UI.Popups.MessageDialog(message, _title);\n        md.commands.append(new Windows.UI.Popups.UICommand(_buttonLabel));\n        md.showAsync().then(function() {\n            isAlertShowing = false;\n            if (win) {\n                win();\n            }\n\n            if (alertStack.length) {\n                setTimeout(alertStack.shift(), 0);\n            }\n\n        });\n    },\n\n    prompt: function (win, lose, args) {\n        if (isAlertShowing) {\n            var later = function () {\n                module.exports.prompt(win, lose, args);\n            };\n            alertStack.push(later);\n            return;\n        }\n\n        isAlertShowing = true;\n\n        var message = args[0],\n            title = args[1],\n            buttons = args[2],\n            defaultText = args[3];\n\n        try {\n            createPromptDialog(title, message, buttons, defaultText, function (evt) {\n                isAlertShowing = false;\n                if (win) {\n                    win(evt);\n                }\n            });\n\n        } catch (e) {\n            // set isAlertShowing flag back to false in case of exception\n            isAlertShowing = false;\n            if (alertStack.length) {\n                setTimeout(alertStack.shift(), 0);\n            }\n            // rethrow exception\n            throw e;\n        }\n    },\n\n    confirm:function(win, loseX, args) {\n\n        if (isAlertShowing) {\n            var later = function () {\n                module.exports.confirm(win, loseX, args);\n            };\n            alertStack.push(later);\n            return;\n        }\n\n        isAlertShowing = true;\n\n        try {\n            var message = args[0];\n            var _title = args[1];\n            var buttons = args[2];\n\n            var md = new Windows.UI.Popups.MessageDialog(message, _title);\n\n            buttons.forEach(function(buttonLabel) {\n                md.commands.append(new Windows.UI.Popups.UICommand(buttonLabel));\n            });\n\n            md.showAsync().then(function(res) {\n                isAlertShowing = false;\n                var result = res ? buttons.indexOf(res.label) + 1 : 0;\n                if (win) {\n                    win(result);\n                }\n                if (alertStack.length) {\n                    setTimeout(alertStack.shift(), 0);\n                }\n\n            });\n        } catch (e) {\n            // set isAlertShowing flag back to false in case of exception\n            isAlertShowing = false;\n            if (alertStack.length) {\n                setTimeout(alertStack.shift(), 0);\n            }\n            // rethrow exception\n            throw e;\n        }\n    },\n\n    beep:function(winX, loseX, args) {\n\n        // set a default args if it is not set\n        args = args && args.length ? args : [\"1\"];\n\n        var snd = new Audio('ms-winsoundevent:Notification.Default');\n        var count = parseInt(args[0]) || 1;\n        snd.msAudioCategory = \"Alerts\";\n\n        var onEvent = function () {\n            if (count > 0) {\n                snd.play();\n            } else {\n                snd.removeEventListener(\"ended\", onEvent);\n                snd = null;\n                if (winX) {\n                    winX(); // notification.js just sends null, but this is future friendly\n                }\n            }\n            count--;\n        };\n        snd.addEventListener(\"ended\", onEvent);\n        onEvent();\n\n    }\n};\n\nrequire(\"cordova/exec/proxy\").add(\"Notification\",module.exports);\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-dialogs/node_modules/cordova-plugin-dialogs/www/android/notification.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar exec = require('cordova/exec');\n\n/**\n * Provides Android enhanced notification API.\n */\nmodule.exports = {\n    activityStart : function(title, message) {\n        // If title and message not specified then mimic Android behavior of\n        // using default strings.\n        if (typeof title === \"undefined\" && typeof message == \"undefined\") {\n            title = \"Busy\";\n            message = 'Please wait...';\n        }\n\n        exec(null, null, 'Notification', 'activityStart', [ title, message ]);\n    },\n\n    /**\n     * Close an activity dialog\n     */\n    activityStop : function() {\n        exec(null, null, 'Notification', 'activityStop', []);\n    },\n\n    /**\n     * Display a progress dialog with progress bar that goes from 0 to 100.\n     *\n     * @param {String}\n     *            title Title of the progress dialog.\n     * @param {String}\n     *            message Message to display in the dialog.\n     */\n    progressStart : function(title, message) {\n        exec(null, null, 'Notification', 'progressStart', [ title, message ]);\n    },\n\n    /**\n     * Close the progress dialog.\n     */\n    progressStop : function() {\n        exec(null, null, 'Notification', 'progressStop', []);\n    },\n\n    /**\n     * Set the progress dialog value.\n     *\n     * @param {Number}\n     *            value 0-100\n     */\n    progressValue : function(value) {\n        exec(null, null, 'Notification', 'progressValue', [ value ]);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-dialogs/node_modules/cordova-plugin-dialogs/www/blackberry10/beep.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nmodule.exports = function (quantity) {\n    var count = 0,\n    beepObj;\n\n    function callback() {\n        if (--count > 0) {\n            play();\n        } else {\n            beepObj.removeEventListener(\"ended\", callback);\n            beepObj = null;\n        }\n    }\n\n    function play() { \n        //create new object every time due to strage playback behaviour\n        beepObj = new Audio('local:///chrome/plugin/cordova-plugin-dialogs/notification-beep.wav');\n        beepObj.addEventListener(\"ended\", callback);\n        beepObj.play();\n    }\n\n    count += quantity || 1;\n    if (count > 0) {\n        play();\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-dialogs/node_modules/cordova-plugin-dialogs/www/browser/notification.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n// Platform: browser\nwindow.navigator.notification = window.navigator.notification || {};\n\nmodule.exports.alert = window.navigator.notification.alert = function(message, callback) {\n    // `notification.alert` executes asynchronously\n    setTimeout(function() {\n        window.alert(message);\n        if (callback) {\n            callback();\n        }\n    }, 0);\n};\n\n\nmodule.exports.confirm = window.navigator.notification.confirm = function(message, callback) {\n    // `notification.confirm` executes asynchronously\n    setTimeout(function() {\n        var result = window.confirm(message);\n        if (callback) {\n            if (result) {\n                callback(1); // OK\n            }\n            else {\n                callback(2); // Cancel\n            }\n        }\n    }, 0);\n};\n\n\nmodule.exports.prompt = window.navigator.notification.prompt = function(message, callback, title, buttonLabels, defaultText) {\n    // `notification.prompt` executes asynchronously\n    setTimeout(function() {\n        var result = window.prompt(message,  defaultText || '');\n        if (callback) {\n            if (result === null) {\n                callback({ buttonIndex: 2, input1: '' }); // Cancel\n            }\n            else {\n                callback({ buttonIndex: 1, input1: result }); // OK\n            }\n        }\n    }, 0);\n};\n\n\nvar audioContext = (function() {\n    // Determine if the Audio API is supported by this browser\n    var AudioApi = window.AudioContext;\n    if (!AudioApi) {\n        AudioApi = window.webkitAudioContext;\n    }\n\n    if (AudioApi) {\n        // The Audio API is supported, so create a singleton instance of the AudioContext\n        return new AudioApi();\n    }\n\n    return undefined;\n}());\n\nmodule.exports.beep = window.navigator.notification.beep = function(times) {\n    if (times > 0) {\n        var BEEP_DURATION = 700;\n        var BEEP_INTERVAL = 300;\n\n        if (audioContext) {\n            // Start a beep, using the Audio API\n            var osc = audioContext.createOscillator();\n            osc.type = 0; // sounds like a \"beep\"\n            osc.connect(audioContext.destination);\n            osc.start(0);\n\n            setTimeout(function() {\n                // Stop the beep after the BEEP_DURATION\n                osc.stop(0);\n\n                if (--times > 0) {\n                    // Beep again, after a pause\n                    setTimeout(function() {\n                        navigator.notification.beep(times);\n                    }, BEEP_INTERVAL);\n                }\n\n            }, BEEP_DURATION);\n        }\n        else if (typeof(console) !== 'undefined' && typeof(console.log) === 'function') {\n            // Audio API isn't supported, so just write `beep` to the console\n            for (var i = 0; i < times; i++) {\n                console.log('Beep!');\n            }\n        }\n    }\n};\n"}